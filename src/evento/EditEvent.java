
package evento;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author daboy
 */
public class EditEvent extends javax.swing.JDialog {

    /**
     * Creates new form EditEvent
     */
    public EditEvent(EventManager em, boolean modal) {
        super(em, modal);
        initComponents();
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coloredPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        editEventLabel = new javax.swing.JLabel();
        eventNameText = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        placeLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        eventPlaceText = new javax.swing.JTextField();
        eventDateText = new com.toedter.calendar.JDateChooser();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        eventTimeText = new javax.swing.JSpinner(sm);
        Edit = new javax.swing.JButton();
        eventIdText = new javax.swing.JTextField();
        nameLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        coloredPanel.setBackground(new java.awt.Color(205, 205, 235));

        titlePanel.setBackground(new java.awt.Color(0, 51, 204));

        editEventLabel.setBackground(new java.awt.Color(0, 51, 204));
        editEventLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editEventLabel.setForeground(new java.awt.Color(255, 255, 255));
        editEventLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editEventLabel.setText("EDIT EVENT");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editEventLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editEventLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        eventNameText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        nameLabel.setText("Event ID");

        placeLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        placeLabel.setText("New Place");

        dateLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        dateLabel.setText("New Date");

        timeLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        timeLabel.setText("New Time");

        eventPlaceText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        eventPlaceText.setPreferredSize(new java.awt.Dimension(6, 29));

        eventDateText.setDateFormatString("dd-MM-yyyy");
        eventDateText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        eventDateText.setMinSelectableDate(new Date());

        JSpinner.DateEditor de = new JSpinner.DateEditor(eventTimeText, "HH:mm");
        eventTimeText.setEditor(de);
        eventTimeText.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        eventTimeText.setPreferredSize(new java.awt.Dimension(33, 30));

        Edit.setBackground(new java.awt.Color(0, 51, 204));
        Edit.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        Edit.setForeground(new java.awt.Color(255, 255, 255));
        Edit.setText("Edit");
        Edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditMouseClicked(evt);
            }
        });

        eventIdText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        nameLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        nameLabel1.setText("New Name");

        javax.swing.GroupLayout coloredPanelLayout = new javax.swing.GroupLayout(coloredPanel);
        coloredPanel.setLayout(coloredPanelLayout);
        coloredPanelLayout.setHorizontalGroup(
            coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coloredPanelLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coloredPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(placeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(coloredPanelLayout.createSequentialGroup()
                        .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(timeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(eventNameText)
                        .addComponent(eventPlaceText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eventIdText)))
                .addGap(34, 34, 34))
        );
        coloredPanelLayout.setVerticalGroup(
            coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coloredPanelLayout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(coloredPanelLayout.createSequentialGroup()
                        .addComponent(eventNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eventPlaceText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coloredPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(placeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(coloredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coloredPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coloredPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Method to check if the user want to edit a event 
    public boolean EditAnotherEvent(int yesNo){
        boolean b;
        if (yesNo == 0){
           b = true;
           clear(); 
        }else{
           b = false;
           clear();
           EditEvent.super.dispose();
        }
        return b;
    }

    // Method to validate the data filling
    public boolean validateEditEventForm(){
        boolean b;
        if (eventIdText.getText().isEmpty() || eventNameText.getText().isEmpty() || eventPlaceText.getText().isEmpty() || eventDateText.getDate().toString() == null){
            b = false;
            JOptionPane.showMessageDialog(null, "Please fill all you event details to edit it");       
        }
        else{b=true;}
        return b;
    }
    
    //Method to check if the event ID exists in the db
    public boolean idExists(int id) {
        DatabaseConnection dbc = new DatabaseConnection();
        String selectData = "SELECT ID FROM events WHERE ID = ?"; 
        try (Connection connection = dbc.connect();
            PreparedStatement preparedStatement = connection.prepareStatement(selectData)) {
            preparedStatement.setInt(1, id); // Set the ID in the query
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next(); // If a row exists, the ID exists
            }
        } catch (SQLException e) {
            System.out.println("Unexpected Error\nError Details: " + e);
        }
        return false; // Return false if an error occurs or ID not found
}
    
    
    
    //Method to free text fields
    public void clear(){
        eventIdText.setText("");
        eventNameText.setText("");
        eventPlaceText.setText("");
}
        
     


    private void EditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditMouseClicked
        if (validateEditEventForm() == true){
            // converting the date selected to string before send it to db
            Date eventDate = eventDateText.getDate();
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
            String stringFormattedDate = sdf1.format(eventDate);

            // converting the time selected to string before send it to db
            Date spinnerTimeValue = (Date) eventTimeText.getValue();
            SimpleDateFormat sdf2 = new SimpleDateFormat("HH:mm");
            String readableTime =  sdf2.format(spinnerTimeValue);

            /* Instanciate my DatabaseConnection class to use to method addEvent(Event e)
            that add Event to the corresponding table in the db*/
            DatabaseConnection db = new DatabaseConnection();
            int id = Integer.parseInt(eventIdText.getText());// convert the string to int 
            
            if (idExists(id) == true){                
                Event e = new Event(eventNameText.getText(), eventPlaceText.getText(), stringFormattedDate , readableTime);// Create the expected the event with filled details to be passed to EditEvent as parameter
                try {
                db.updateEvent(id, e.getName(), e.getPlace(), e.getDate(), e.getTime()); // Update an event event to my db
            } catch (SQLException ex) {
                Logger.getLogger(EditEvent.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("Unexpected Error\nError details"+ex);
            }
            db.printEventsDetails(); // Printing my database events details on the console
            JOptionPane.showMessageDialog(null, "Event edited succesfully !\nDon't forget to refresh events");
            String[] options = {"Yes", "No"}; // Initializing options parameters for the showOptionDialog() method
            int yesNo = JOptionPane.showOptionDialog(null,"Do you want to edit another event ?","Edit another event", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE, null, options, null);
            EditAnotherEvent(yesNo);
            }else{
                JOptionPane.showMessageDialog(null, "Event not found\nPlease verify your ID ! ");
            }
        }

    }//GEN-LAST:event_EditMouseClicked

    
    
  
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private EventManager EventManager;
            @Override
            public void run() {
                EditEvent dialog = new EditEvent(EventManager, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Edit;
    private javax.swing.JPanel coloredPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel editEventLabel;
    private com.toedter.calendar.JDateChooser eventDateText;
    private javax.swing.JTextField eventIdText;
    private javax.swing.JTextField eventNameText;
    private javax.swing.JTextField eventPlaceText;
    private javax.swing.JSpinner eventTimeText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JLabel placeLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
